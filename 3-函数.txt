@一个作用域的例子
var a= 123;  
function f(){   
     alert(a); 
     var a = 1;
      alert(a); 
}

f();

//实际上第一次弹出的是“undefined”（而不是“123”)，第二次弹出的是“1”；
//因为“函数域”始终优先于全局域，所以局部变量a会覆盖掉所有与它同名的全局变量。
//尽管在alert（）第一次被调用时，a还没有被正式定义。


@回调函数
function invokeAdd(a,b){
    return a() + b();
}

function one(){
    return 1;
}

function two(){
    return 2;
}

invokeAdd(one,two);


//也可以用匿名函数来代替one（）和two（）
invokeAdd(function(){ return 1;},function(){ return 2;})

//回调函数示例
//给三个参数分别乘以2
function multiplyByTwo(a,b,c){
    var i, ar = [];
    for(i = 0;i<3;i++){
        ar[i] = arguments[i]*2
    }
    return ar;
}

//给参数加1
function addOne(a){
    return a+1;
}

mutiplyByTwo()

//
function multiplyByTwo(a,b,c,callback){  
    var i, ar = [];
      for(i = 0; i < 3;i++){ 
         ar[i] = callback(arguments[i]*2); 
     }  
    return ar;  
}
myarr = multiplyByTwo(1,2,4,addOne);
//


@自调函数
(
    function(){
        alert('boom');
    }
)()



(
    function(name){
        alert('Hello '+name+'!');
    }
)('dude')

@内部（私有）函数
var a = function(param){
    var b = function(theinput){
        return theinput * 2;
    };
    return "The function's result is "+b(param); //直接调用b函数
};
a(2);

@返回函数的函数
function a(){
    alert('A!');
    return function(){
        alert('B!');
    };
}

var newFunc = a();  //执行此句时是“alert('A!');”
newFunc();  //执行此句时是“alert('B!');”


a()();	// 如果直接执行此句则结果为弹出两个警告框，你知道的


@能重写自己的函数？？？
var a = function(){
    function someSetup(){
        var setup = 'done';
    }
    function actualWork(){
        alert('Worky-worky');
    }
    someSetup();
    return actualWork;
}();

a();


@闭包
function f(){
    var b = "b";
    return function(){
        return b;
    }
}

b；//b is not defined
var n = f();
n(); //"b"


//闭包2#
var n;
function f(){
    var b = "b";
    n = function(){
        return b;
    }
}

f();
n;


//闭包3#
function f(arg) {
    var n = function (){
        return arg;
    }
    arg++;
    return n;
}

var m = f(123);
m(); //结果为124


//循环中的闭包
function f() {
    var a = [];
    var i;
    for(i=0;i<3;i++){
        a[i]=function(){
            return i;
        }
    }
    return a;
}

var a = f();

>>> a[0]()
3
>>> a[1]()
3
>>> a[2]()
3


//显示三个不同的变量
function  f() {
    var a =[];
    var i;
    for (i=0;i<3;i++){
        a[i] = (function(x){
            return function(){
                return x;
            }
        })(i);
    }
    return a;
}

>>> var a = f();
undefined
>>> a[0]()
0
>>> a[1]();
1
>>> a[2]();
2
>>> a[3]();
TypeError: a[3] is not a function

//另一种方法：定义一个“正常点”，不使用自调函数。
function f(){
    function makeClosure(x){
        return function(){
            return x;
        }
    } 
    var a  =[];
    var i;
    for (i=0;i<3;i++){
        a[i] = makeClosure(i);
    }
    return a;
}


>>> a[0]()
0
>>> a[1]()
1



@getter与setter
var getValue,setValue;
(function() {
    var secret = 0;
    getValue = function(){
        return secret;
    };
    setValue = function (v){
        secret = v;
    }
})()

>>> getValue()
0
>>> setValue(3)
undefined
>>> getValue()
3

@迭代器
//定义一个接受数组输入的初始化函数
function setup(x) {
    var i = 0;
    return function(){
        return x[i++];
    }
}

>>> var next = setup(['hello','hi','hi3']);
undefined
>>> next();
"hello"
>>> next();
"hi"
>>> next();
"hi3"


@练习题
1.编写一个十六进制转换为颜色的函数：
代码：
function getRGB(arg){
   retrun("rgb("+parseInt(arg.substring(1,3),16)+","+parseInt(arg.substring(3,5),16)+","+parseInt(arg.substring(5,8),16)+")");
}
//形参获取要转换的十六进制数。先用“arg.substring(1,3),16)”将其分离为三段，然后分别用parseInt
//将十六进制的转换为十进制。

运行结果：
>>> var a = getRGB("#00FF00");
undefined
>>> a;
"rgb(0,255,0)"

2.
>>> parseInt(1e1);
10
>>> parseInt('1e1');
1
>>> parseFloat('1e1');
10
>>> isFinite(0/10)
true
>>> isFinite(20/0)
false
>>> isNaN(parseInt(NaN));
true

3.
var a = 1;
function f() {
    var a = 2;
    function n(){
        alert(a);
    }
    n();
}
f();

运行结果你猜是啥？ alert(1)还是alert(2)?

哈哈 结果是 alert(2)


4.alert("Boo!");
4.1
var f = alert;
eval('f("Boo!")');
4.2
var e;
var f = alert;
eval('e=f')('Boo!');
4.3
(
    function(){
        return alert;
    }
)()('Boo!');

三个例子都会弹出“Boo！”警告框。
看下下面函数的结果：
(
    function(){
        return alert;
    }
)();

结果是：
>>> (      function(){          return alert;      }  )();

alert()

