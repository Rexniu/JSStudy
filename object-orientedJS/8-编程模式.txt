@编程模式
@行为隔离
//一个网页通常所有的三个要素：内容（HTML）、外观（CSS）、行为（JavaScript）
*尽量不要使用内嵌事件的处理方法。（不适用类似于onclick,onmouseover这样的内嵌属性，而是利用addEventListener/attachEvent）
行为隔离
@命名空间
（为了减少命名冲突，我们通常都是尽量减少使用全局变量的几乎，但这并不能根本解决问题，更好的办法
是将变量和方法定义在不同的命名空间中）

>>> var MYAPP = MYAPP || {}     //新建一个全局变量MYAPP
undefined
>>> MYAPP.event={};             //将某个全局对象设定为MYAPP的属性
Object {}
MYAPP.event = {                 //为MYAPP添加方法
    addListener:function(e1,type,fn) {
        //..do the things
    },
    addListenr:function(e1,type,fn)  {
        //...
    },
    getEvent:function(e) {
        //...
    }
    //...other methods or propertied
}

@命名空间中的构造器应用      ?????????
//利用DOM工具本身定义的Element构造器
MYAPP.dom = {};
MYAPP.dom.Element = function(type,prop){
    var tmp = document.createElement(type);
    for (var i in prop ) {
        tmp.setAttribute(i,prop[i]);
    }
}
//也可用Text构造器来创建文本类节点
MYAPP.dom.Text = function() {
    return document.createTextNode(txt);
}

//使用改构造器在网页底部创建一个链接
var ell = new MYAPP.dom.Element(
    'a',
    {href:'http://phpid.com'}
);
var e12 = new MYAPP.dom.Text('click me');
ell.apppendChild(e12);
document.body.appendChild(ell);
@namespace()方法
MYAPP.namespace('dom.style');
上面等价于：
 MYAPP.dom = {};
 MYAPP.dom.style = {};


var MYAPP = {};
MYAPP.namespace = function (name){
    var parts = name.split('.');
    var current = MYAPP;
    for (var i in parts) {
        if (!current[parts[i]]) {
            current[parts[i]] = {};
        }
        current = curent[parts[i]];
    }
}
>>> MYAPP.namespace('event');
undefined
>>> MYAPP.namespace('dom.style');    
undefined

//这两句代码等价于：
var MYAPP = {
	event: {},
	dom: {
	style:{}
	}
}

@初始化分支
var MYAPP = {};
MYAPP.event = {
    addListener:null,
    removeListener:null
}

if (typeof window.addEventListener === 'function') {
    MYAPP.event.addListener = function(el,type,fn) {
        el.addEventListener(type,fn,false);
    };
    MYAPP.event.removeListener = function(el,type,fn) {
        el.removeEventListener(type,fn,false);
    };
} else if (typeof document.attachEvent === 'function') { //IE
    MYAPP.event.addListener = function(el,type,fn) {
        el.attachEvent('on' + type,fn);
    };
    MYAPP.event.removeListener = function(el,type,fn){
        el.detachEvent('on' + type,fn);
    };
} else { //older browsers
    MYAPP.evetn.addListener = function(el,type,fn) {
        el['on'+type] = fn;
    };
    MYAPP.event.removeListener = function(el,type,fn) {
        el['on' +type] = null;
    };
};

//上述脚本定义了与路蓝旗特性相关的addListener()和removeListener()方法，当再次被调用时
//就不需要探测浏览器特性了，脚本会执行的更快。
@延迟定义
//与初始化分支相比，该模式下的分支只有在相关函数第一次被调用时才会发生。
//以下列子：在第一次被调用时，首先会检查浏览器支持的功能，然后为自己选择最合适的实现，最后
//调用自身已完成真正的事件添加。当下一次调用时就会直接调用他选择的新方法而不再需要做分支判断。
var MYAPP = {};
MYAPP.myevent = {
    addListener:function(e1,type,fn) {
        if (typeof el.addEventListener === 'function') {
            MYAPP.myevent.addListener = function(e1,type,fn) {
                el.addEventListener(type,fn,false);
            };
        }else if (typeof el.attachEvent === 'function') {
            MYAPP.myevent.addListener = function(el,type,fn) {
                el.attachEven('on'+type,fn);
            };
        }else {
            MYAPP.myevent.addListener = function(el,type,fn) {
                el['on' + type] = fn;
            };
        }
        MYAPP.myevent.addListener(el,type,fn);
    }
};


@配置对象
//用单个对象来代替多个参数：
//*不用考录参数的顺序
//*可以跳过某些参数的设置
//*函数的扩展性更强，可以时应将来的扩展需要
//*代码的可读性更好，因为在代码中我们看到的是配置对象的属性名称

//a constructor that creates buttons，参数包括一段文本（<input>标签的value属性），和一个可缺省的type参数
var MYAPP = {};
MYAPP.dom = {};
MYAPP.dom.Button = function(text,type) {
    var b = document.createElement('input');
    b.type = type || 'submit';
    b.value = text;
    return b;
}
>>> document.body.appendChild(new MYAPP.dom.Button('puuush'));   //

//如果要为按钮设置更多属性，例如颜色和字体。构造器的定义就会变成：
>>> MYAPP.dom.Button = function(text,type,color,border,font){}
//这样就很不方便了
//更好的选择就是用一个可配置对象参数来代替所有的参数配置
MYAPP.dom.Button = function(text,conf) {
    var type = conf.type || 'submit';
    var font = conf.font || 'Verdana';
    //....
}

//使用方法：
var config = {
    font:'Arial,Verdana,sans-serif',
    color:'white'
};
new MYAPP.dom.Button('puuush',config);

//另一个例子
document.body.appendChild(
    new MYAPP.dom.Button('dude',{color:'red'})
);

@私有属性和方法
var MYAPP = {};
MYAPP.dom = {};
MYAPP.dom.Button = function(text,conf) {
    var styles = {
        font:'Verdana',
        border:'1px solid black',
        color:'black',
        background:'grey'
    };
    function setStyle() {
        for (var i in styles ) {
            b.style[i] = conf[i] || styles[i];
        }
    }
    conf = conf || {};
    var b = document.createElement('input');
    b.type = conf['type'] || 'submit';
    b.value = text;
    setStyle();
    return b;
};
//这段代码中，styles是一个私有属性，二setStyle()则是一个私有方法。构造器可以在内部调用它们，但他们却不能被外部代码所调用。

@特权函数
//实际上只是一些普通的公共函数。

@私有函数的公有化    ？？？？？？？？？？？
var MYAPP = {};
MYAPP.dom = (function(){
    var _setStyle = function(el,prop,value){
        sonsole.log('setStyle');
    };
    var _getStyle = function(el,prop) {
        console.log('getStyle');
    };
    return{
        setStyle: _setStyle,
        getStyle: _getStyle,
        yetStyle: _setStyle
    };
})()
//这种情况下，当MYAPP.dom.setStyle()被调用时，_setStyle()也会被调用，也可以在外面改写setStyle()方法。
//也可以在外面改写setStyle()方法。
MYAPP.dom.setStyle = function(){alert('b');};
?????  what？
MYAPP.dom.setStyle指向的是新的方法；
MYAPP.dom.yetAnother任然指向_setStyle();
_setStyle方法随时可以被内部的代码调用。

@自执行函数
//一个保证全局命名空间不被污染的模式是，看吧代码封装在一个匿名函数中并立刻自行调用。
(function () {
    //code goes here...
})()
//自执行的方法也可用于创建和返回对象
var MYAPP = {};
MYAPP.dom = function(){
    //initialization code...
    function _private(){
        //....body
    }
    return{
        getStyle:function(el,prop) {
            console.log('getStyle');
            _private();
        },
        setStyle: function(el,prop,value) {
            console.log('setStyle');
        }
    };
}();

@链式调用
//用构造器新建一个<span>元素，然后将其添加到<body>元素中
var obj = new MYAPP.dom.Element('span');
obj.setText('hello');
obj.setStyle('color','red');
obj.setStyle('font','Verdana');
document.body.appendChild(obj);

//链式调用：
var obj = new MYAPP.dom.Element('span');
obj.setText('hello').setStyle('color','red').setStyle('font','Verdana');
document.body.appendChild(obj);

//甚至可以不用定义obj变量
document.body.appendChild(
    new MYAPP.dom.Element('span').setText('hello').setStyle('color','red').setStyle('font','Verdana')
);

//jQuery中使用了大量的链式调用模式。

@JSON （JavaScript Object Notation）

@设计模式
《设计模式：可复用面向对象软件的基础》
@单件模式
JavaScript中最基本的单间模式实现是使用对象文本表示法：var single = {};
@单件模式2
1.全局变量
function Logger() {
    if (typeof global_log === 'undefined') {
        global_log = this;
    }
    return global_log;
}

var a = new Logger();
var b = new Logger();
alert(a === b);  //true

2.构造器属性
function Logger() {
    if (typeof Logger.single_instance === 'undefined') {
        Logger.single_instance = this;
    }
    return Logger.single_instance;
}

@工厂模式
//在该模式下，代码将会根据具体的输入或其他既定规则，自行决定创建哪种类型的对象。
//三个不同的构造器，所实现的功能是相似的，他们所创建的对象都将接受一个URL类型的参数
var MYAPP = {};
MYAPP.dom = {};
MYAPP.dom.Text = function() {
    this.insert = function(where){
        var txt = document.createTextNode(this.url);
        where.appendChild(txt);
    };
};
MYAPP.dom.Link = function() {
    this.insert = function(where){
        var link = document.dreateElement('a');
        link.href = this.url;
        link.appendChild(document.createTextNode(this.url));
        where.appendChild(link);
    };
};
MYAPP.dom.Image = function(){
    this.insert = function(where){
        var im = document.createElement('img');
        im.src = this.url;
        where.appendChild(im);
    };
};

//设置url属性并调用insert()方法
var o = new MYAPP.dom.Image();
o.url = 'http://images.packtpub.com/images/PacktLogoSmall.png';
o.insert(document.body);
var o = new MYAPP.dom.Text();
o.url = 'http://images.packtpub.com/images/PacktLogoSmall.png';
o.insert(document.body);
var o = new MYAPP.dom.Link();
o.url = 'http://images.packtpub.com/images/PacktLogoSmall.png';
o.insert(document.body);

//如果type中包含了被创建对象的类型，我们可以用if或者switch语句写出如下代码：
var o;
if (type === 'Image') {
    o = new MYAPP.dom.Image();
}
if (type === 'Link') {
    o = new MYAPP.dom.Link();
}
if (type === 'Text') {
    o = new MYAPP.dom.Text();
}
o.url = 'http://....'
o.listen();
//这段代码可以共工作，但如果构造器很多，代码就会很长。
//此时应该考虑将这种动态创建对象的操作委托给一个工厂函数。

//给MYAPP.dom工具添加一个工厂方法
MYAPP.dom.factory = function(type) {
    return new MYAPP.dom[type];   
}

//这样就可以把上面的三个if替换掉了
var o = MYAPP.dom.factory(type);
o.url = 'http://....'
o.insert();

@装饰器模式
//装饰器模式是一种结构型模式，与对象的创建无关，主要烤炉的是如何拓展对象的功能。
//装饰一颗圣诞树
var tree = {};
tree.decorate = function() {
    alert('Make sure the tree won\'t fall');
}
//定义getDecorator（）方法
tree.getDecorator = function(deco){
    tree[deco].prototype = this;
    return new tree[deco];
}
//创建第一个装饰器RedBalls（）
tree.RedBalls = function() {
    this.decorate = function(){
        this.RedBalls.prototype.decorate();
        alert('Put on some red balls');
    }
};
//用同样的方法来分别添加BlueBalls()和Angel()装饰器
tree.BlueBalls = function() {
    this.decorate = function() {
        this.BlueBalls.prototype.decorate();
        alert('Add blue balls');
    }
};
tree.Angel = function() {
    this.decorate = function() {
        this.Angel.prototype.decorate();
        alert('An anel on the top');
    }
}
//再把所有的装饰器都添加到基础对象中
tree = tree.getDecorator('BlueBalls');
tree = tree.getDecorator('Angel');
tree = tree.getDecorator('RedBalls');
//运行decorate()方法，依次弹出三个对话框

@观察者模式  （通常来说，可分为两类：推送和拉动）
var observer = {
    addSubscriber: function(callback) {
        this.subscribers[this.subscribers.length] = callback;
    },
    removeSubscriber: function(callback) {
        for (var i = 0;i < this.subscribers.length;i++) {
            if (this.subscribers[i] === callback) {
                delete(this.subscribers[i]);
            }
        }
    },
    publish: function(what) {
        for (var i = 0;i < this.subscribers.length;i++) {
            if (typeof this.subscribers[i] ===  'function') {
                this.subscribers[i](what);
            }
        }
    },
    make: function(o) { //turns an object into a publisher
        for (var i in this) {
            o[i] = this[i];
            o.subscribers = [];
        }
    }
};

//创建一些订阅者。
var blogger = {
    writeBlogPost: function() {
        var content = 'Today is' + new Date();
        this.publish(content);
    }
}
//LA Times对象，每当新一期的报刊出来时，就会调用publish()方法
var la_times = {
    newIssue: function() {
        var paper = 'Martians have landed on Earth!';
        this.publish(paper);
    }
};
//转变为发行商
observer.make(blogger);
observer.make(la_times);
//准备两个简单的对象
var jack = {
    read: function(what) {
        console.log('I just read that' +what)
    }
};
var jill = {
    gossip:function(what) {
        console.log('You didn\'t hear it from me,but'+what );
    }
};
//他们可以订阅blogger对象
blogger.addSubscriber(jack.read);
blogger.addSubscriber(jill.gossip);
//blogger写了新的博客时：
blogger.writeBlogPost();
I just read thatToday isTue Dec 03 2013 21:36:06 GMT+0800 (China Standard Time) VM2473:4
You didn't hear it from me,butToday isTue Dec 03 2013 21:36:06 GMT+0800 (China Standard Time) 
blogger.removeSubscriber(jill.gossip);  //jill取消订阅
blogger.writeBlogPost();
I just read thatToday isTue Dec 03 2013 21:36:54 GMT+0800 (China Standard Time) VM2473:4
undefined

la_times.addSubscriber(jill.gossip);     //jill也可以订阅LA Times
undefined
la_times.newIssue();
You didn't hear it from me,butMartians have landed on Earth! VM2473:9
undefined


the end