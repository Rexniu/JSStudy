浏览器环境

//JavaScript程序是不能脱离宿主环境而独立运行的。
//BOM（Brower Object Model,及浏览器对象模型）
//DOM(Document Object Model,即文档对象模型)

//在JavaScript中，每个宿主环境都有一个全局对象。具体到浏览器环境中，就
//是window对象了，所有的JavaScript核心函数也都只是window对象的方法。

//navigator是一个用于反映浏览器本身及其功能信息的对象。
>>> window.navigator.userAgent
"Mozilla/5.0 (Windows NT 6.2; WOW64; rv:25.0) Gecko/20100101 Firefox/25.0"


if (typeof window.addEventListener === 'function') {
	//feature is supported,let's use it
}else {
	//hmm,this feature is not supported, will have to 
	//think of another way
}

@Firebug的备忘功能

>>> navigator
Navigator { mozApps={...}, mimeTypes=MimeTypeArray, plugins=PluginArray, 更多...}
>>> console.dir(navigator)

//会得到一份完整的属性列表，以及这些属性的而当前值。


@windown.lcoation  用于存储当前载入页面URL信息的对象。
>>> window.location
http://www.google.com.hk/ { constructor={...}, protocol="http:", host="www.google.com.hk", 更多...}
>>> for(var i in location) {console.log(i + ' = "' + location[i] + '"')}
hash = ""
protocol = "http:"
host = "www.google.com.hk"
pathname = "/"
href = "http://www.google.com.hk/"
hostname = "www.google.com.hk"
search = ""
port = ""
origin = "http://www.google.com.hk"

reload = "function reload() {
    [native code]
}"

replace = "function replace() {
    [native code]
}"

assign = "function assign() {
    [native code]
}"

valueOf = "function valueOf() {
    [native code]
}"

//页面导航的不同方式
window.location.href = 'http://www.packtpub.com'
location.href = 'http://www.packtpub.com'
location = 'http://www.packtpub.com'
location.assign('http://www.packtpub.com')

location.replace('http://www.yahoo.com')

location.reload()   //重新载入

window.location.href = window.location.href   //也可以让location.href属性再次指向自己

location = loction

@window.history
//允许我们在同一个浏览器会话中存储有限数量的访问记录

>>> window.history.length    //查看数量
7
>>> window.history[0]      //不能这样访问
Error: The operation is insecure
history.forward()  //前进
history.back()    //后退
history.go(-1)    //同样可以实现页面跳转
history.go(-2)    //后退
history.go(0)    //重载当前页面

@window.frames
//是当前所有frame元素的集合。无论当前页面是否存在frame元素，window.frame属性总是存在的，并指向了window对象本身
>>> window.frames === window
true
>>> frames.length
3
>>> window.frames[0]
Window sh136.html#
>>> window.frames[0].window
Window sh136.html#
>>> frames[0].window
Window sh136.html#
>>> frames[0].window.location.reload()
Error: Permission denied to access property 'reload'

//通过一个叫top的属性，我们可以反问道当前最顶层页面（包含所有其他farme元素的页面）中的任何frame元素。
>>> window.frames[0].window.top === window
true
>>> window.frames[0].window.top === window.top    //？？？？？
true
>>> window.frames[0].window.top === top
true
>>> self === window
true
>>> frames[0].self == frames[0].window
true
>>> frames[0].self == frames[0].window
true
>>> window.frames['myframe'] === window.frames[0]    //如果元素拥有名字属性，我们就可以通过名字来访问frame
false

@window.screen  该属性所提供的是浏览器以外的桌面信息，
>>> window.screen.colorDepth   //显示器色位
24
>>> screen.width
1366
>>> screen.availWidth
1366
>>> screen.height
768
>>> screen.availHeight
768

@windows.open()/close()
var win = window.open('http://www.packtpub.com','packt','width=300,height=300,resizable=yes');
>>> win.close()     //关闭新窗口

@window.moveTo()、window.resizeTo()
window.moveTo(100,100)；   //????没反应。。
>>> window.moveBy(10,-10)  //????没反应。。

@window.alert()、window.prompt()、window.confirm()

>>> window.alert(213)   //alert()只是全局对象的一个方法
>>> var answer = confirm('Are you cool?'); console.log(answer);
true    //点击“确定” 返回true  点击“取消”  返回 false

so....

if ( confirm('Are you sure you want to delete this item?')) {
	//delete
} else {
	//abort
}



>>> var answer = prompt('And your name was ?'); console.log(answer);
guess    //如果点击Cancel或者X以及Esc退出，对话框将会返回null

@window.setTimeout()、window.setInterval()
//这两个方法主要被用于某些代码片段的执行调度。
//setTimeout()用于在指定的毫秒数后执行某段既定代码，
//setInterval()则用于每隔一段毫秒数重新执行这段代码。

function boo() {alert('Boo!');}
>>> setTimeout(boo,2000);    //Chrome 可以延时弹出，FF没反应  WHY？？？
36                            //返回的整数是该函数的超时ID，可以用这个ID调用clearTimeout()方法来取消当前的超时。


function boo() { console.log('Boo');};     //同样的Chrome可以，FF没反应？？？why？
var id = setInterval(boo,2000)
undefined
13
Boo VM295:2
clearInterval(id)    //取消操作。
undefined

var id = setInterval("alert('boo,boo')",2000);   //虽没有错误，但不建议使用

var id = setInterval(                 //这个更好些，将相关函数调用封装成函数。
    function(){
        alert('boo,boo');
    },2000
);



@window.cocument
//是一个BOM对象。


@DOM
//DOM:Document Object Model,即文档对象模型,是一种将XML或HTML文档解析成树形节点的
//方法。通过DOM的方法与属性，我们就可以访问到页面中的任何元素，并进行元素的修改、
//删除以及添加等操作。DOM也是一套语言对立的API（Application Programming Interface）
//不仅在 JavaScript中有相关的实现，在其他语言中也有实现。

>>> var bd = document.documentElement.childNodes[1]  //把body元素的引用赋值给一个变量
undefined
>>> bd.childNodes.length
5
>>> bd.childNodes[1]
<script src="/xjs/_/js/k=xjs.s.en_US.dtklyhSMdi0.O/m=sy15,cdos,sy32,gf,vm,sy39,sy66,sy67,sy194,tbui,mb,sy101,sy167,cfm,abd,sy53,sy54,sy56,sy57,sy55,sy58,sy63,sy64,sy34,sy59,sy60,sy52,sy61,sy62,sy65,sy68,sy69,sy90,sy51,llc,foot,sy173,sy175,lu,sy42,sy179,m,me,sy146,sy145,sy157,sy147,em2,em3,em4,sy192,tnv,sy38,sy46,sy40,sy43,sy44,sy45,sy47,sy41,ttbcdr,sy109,adp,sy123,async,sy91,hv,sy92,jsaleg,sy97,sy98,sy171,kp,lc,ob,sf,sy160,sfa,tbpr,sy84,sy185,sy119,sy186,tr/am=EAIAog/rt=j/d=0/sv=1/rs=AItRSTOUHaOtIrkQ8w3pAauoLuCCdKl6UA">
>>> bd.childNodes[1].hasAttributes()     //用hasAttributes()方法来检查该元素中是否存在属性。
true
>>> bd.childNodes[1].hasAttributes().length
undefined
>>> bd.childNodes[1].attributes.length   
1
>>> bd.childNodes[1].attributes[0].nodeName   //通过索引值或属性名来访问一个属性，也可以盗用getAttribut（）方法来获取相关的属性值。
"src"
>>> bd.childNodes[1].attributes[0].nodeValue
"/xjs/_/js/k=xjs.s.en_US.dtklyhSMdi0.O/m=sy15,cdos,sy32,gf,vm,sy39,sy66,sy67,sy194,tbui,mb,sy101,sy167,cfm,abd,sy53,sy54,sy56,sy57,sy55,sy58,sy63,sy64,sy34,sy59,sy60,sy52,sy61,sy62,sy65,sy68,sy69,sy90,sy51,llc,foot,sy173,sy175,lu,sy42,sy179,m,me,sy146,sy145,sy157,sy147,em2,em3,em4,sy192,tnv,sy38,sy46,sy40,sy43,sy44,sy45,sy47,sy41,ttbcdr,sy109,adp,sy123,async,sy91,hv,sy92,jsaleg,sy97,sy98,sy171,kp,lc,ob,sf,sy160,sfa,tbpr,sy84,sy185,sy119,sy186,tr/am=EAIAog/rt=j/d=0/sv=1/rs=AItRSTOUHaOtIrkQ8w3pAauoLuCCdKl6UA"
属性用法中的 nodeValue 属性已不赞成使用。请使用 value 替代。
debugg...al code (第 1 行)
>>> bd.childNodes[1].attributes[0].value
"/xjs/_/js/k=xjs.s.en_US.dtklyhSMdi0.O/m=sy15,cdos,sy32,gf,vm,sy39,sy66,sy67,sy194,tbui,mb,sy101,sy167,cfm,abd,sy53,sy54,sy56,sy57,sy55,sy58,sy63,sy64,sy34,sy59,sy60,sy52,sy61,sy62,sy65,sy68,sy69,sy90,sy51,llc,foot,sy173,sy175,lu,sy42,sy179,m,me,sy146,sy145,sy157,sy147,em2,em3,em4,sy192,tnv,sy38,sy46,sy40,sy43,sy44,sy45,sy47,sy41,ttbcdr,sy109,adp,sy123,async,sy91,hv,sy92,jsaleg,sy97,sy98,sy171,kp,lc,ob,sf,sy160,sfa,tbpr,sy84,sy185,sy119,sy186,tr/am=EAIAog/rt=j/d=0/sv=1/rs=AItRSTOUHaOtIrkQ8w3pAauoLuCCdKl6UA"
>>> bd.childNodes[1].getAttribute('class')
null

>>> bd.childNodes[1].nodeName
"SCRIPT"
>>> bd.childNodes[1].innerHTML
""
>>> bd.childNodes[3].innerHTML
"#nycntg{margin:6px 25px 10px 0}#nycp{background-color:#fafafa;border-left:1px solid #ebebeb;bottom:0;left:0;margin-left:33px;min-width:2

@DOM访问的快捷方法
//getElementsByTagName()、getElementsByName()、getElementById()。
>>> var bd = document.documentElement.childNodes[1]
undefined
>>> bd.childNodes.length
9
>>> document.getElementsByTagName('p').length
3
>>> document.getElementsByTagName('p')[0]
<p calss="opener">
>>> document.getElementsByTagName('p').item(0)
<p calss="opener">
>>> document.getElementsByTagName('p')[0].innerHTML
"first paragh"
>>> document.getElementsByTagName('p')[2]
<p id="closer">
>>> document.getElementsByTagName('p')[2].id
"closer"
>>> document.getElementsByTagName('p')[0].className
""


>>> document.getElementById('closer')
<p id="closer">
>>> var para = document.getElementById('closer')
undefined
>>> para.nextSibling
<TextNode textContent="\n ">
>>> para.previousSibling
<TextNode textContent="\n ">
>>> para.previousSibling.previousSibling
<p>
>>> para.previousSibling.previousSibling.previousSibling
<TextNode textContent="\n ">
>>> para.previousSibling.previousSibling.nextSibling.nextSibling
<p id="closer">
>>> document.body
<body>
>>> document.body.nextSibling   //nextDibling与prviousSibling两个属性。
null
>>> document.body.previousSibling
<head>

>>> document.body.firstChild     //firstChild 和 lastChild 属性
<TextNode textContent="\n ">
>>> document.body.lastChild
<TextNode textContent="\n \n">
>>> document.body.lastChild.previousSibling
Comment { data=" and that's about it ", length=21, previousElementSibling=p#closer, 更多...}
>>> document.body.lastChild.previousSibling.nodeValue
" and that's about it "

@遍历DOM
function walkDOM(n) {
    do {
        console.log(n);
        if (n.hasChildNodes()) {
            walkDOM(n.firstChild)
        }
    } while (n = n.nextSibling)
}

>>> walkDOM(document.documentElement)
<html>
<head>
<meta charset="utf-8">
<TextNode textContent="\n ">
<body>
<TextNode textContent="\n ">
<p calss="opener">
<TextNode textContent="first paragh">
<TextNode textContent="\n ">
<p>
<em>
<TextNode textContent="second">
<TextNode textContent=" paragraph">
<TextNode textContent="\n ">
<p id="closer">
<TextNode textContent="final">
<TextNode textContent="\n ">
Comment { data=" and that's about it ", length=21, previousElementSibling=p#closer, 更多...}
<TextNode textContent="\n \n">
undefined
>>> walkDOM(document.body)
<body>
<TextNode textContent="\n ">
<p calss="opener">
<TextNode textContent="first paragh">
<TextNode textContent="\n ">
<p>
<em>
<TextNode textContent="second">
<TextNode textContent=" paragraph">
<TextNode textContent="\n ">
<p id="closer">
<TextNode textContent="final">
<TextNode textContent="\n ">
Comment { data=" and that's about it ", length=21, previousElementSibling=p#closer, 更多...}
<TextNode textContent="\n \n">
undefined

@DOM节点的修改
>>> var my = document.getElementById('closer'); 
undefined
>>> my.innerHTML = 'finall!!!'      //修改文本
"finall!!!"
>>> my.innerHTML='<em>my</em> final';    //innerHTML可以接受任何HTML代码串。
"<em>my</em> final"
>>> my.firstChild
<em>
>>> my.firstChild.firstChild
<TextNode textContent="my">
>>> my.firstChild.firstChild.nodeValue = 'yours';     //修改nodeValue属性来实现相关文本修改
"yours"

@修改样式
>>> my.style.border = '1px solid red';
"1px solid red"
>>> my.style.fontWeight = 'bold';
"bold"
>>> my.align = 'right';
"right"
>>> my.name = 'myname'
"myname"
>>> my.id
"closer"
>>> my.id = 'further'
"further"
>>> my.id
"further"
>>> my
<p id="further" align="right" style="border: 1px solid red; font-weight: bold;">

@玩转表单
>>> var inputs = document.getElementsByTagName('input');
undefined
>>> inputs.length
10
>>> inputs[1].name
"safe"
>>> inputs[1].value = 'you guess';
"you guess"

function toggle(){       //没试出效果，Chrome、FF均是，google改了
    var st = document.getElementsByTagName('input')[3].style;
    st.visibility = (st.visibility === 'hidden') ? 'visible':'hidden';
}

var myint = setInterval(toggle,1000)
clearInterval(myint)

@新建节点
//新建节点：createElement()和cretateTextNode()
//append方法则可以用来将新节点添加到DOM
>>> var myp = document.createElement('p'); //创建一个新的元素
undefined
>>> myp.innerHTML = 'yet another';  //添加内容
"yet another"
>>> myp.style  //被创建的元素会自动获得所有的默认属性，例如style。
CSS2Properties { length=0, MozAppearance="", MozOutlineRadius="", 更多...}
>>> myp.style.border = '2px dotted blue';    //修该其属性
"2px dotted blue"
>>> document.body.appendChild(myp)    //将新节点添加到DOM树结构中
<p style="border: 2px dotted blue;">

@纯DOM创建节点
// 1.新建一个内容为“yet another”的文本节点
// 2.再新建一个段落节点
// 3.将文本节点添加为段落节点的子节点。
// 4.将段落节点添加为body的子节点

//create P
var myp = document.createElement('p');
//create text node and append to p
var myt = document.createTextNode('one more paragraph');
myp.appendChild(myt);
//create STRONG and append another text node to it
var str = document.createElement('string');
str.appendChild(document.createTextNode('bold'));
//append   STRONG to p 
myp.appendChild(str);
//append P to BODY
document.body.appendChild(myp);

@cloneNode()
>>> var el = document.getElementsByTagName('p')[1];   
undefined
>>> el
<p>
>>> document.body.appendChild(el.cloneNode(false));  //建立一份el的浅拷贝（false，浅拷贝：只对当前的节点），并将其添加到body元素的末端。
<p>
>>> document.body.appendChild(el.cloneNode(true));   //建立一份深拷贝（true，深拷贝，包括所有子节点）
<p>
>>> document.body.appendChild(el.firstChild.cloneNode(true));  //只拷贝其中的EM元素
<em>
>>> document.body.appendChild(el.firstChild.firstChild.cloneNode(false));
<TextNode textContent="second">

@insertBefore()
//insertBefor（）可以指定将新节点插入哪一个元素的前面。

>>> document.body.appendChild(document.createTextNode('boo!'));
<TextNode textContent="boo!">    //插入到body元素的末端

document.body.insertBefore(         //插入到body元素的第一个子节点
    document.createTextNode('boo!'),
    document.body.firstChild    
);                          

@移除节点
//从DOM树中移除一个节点，可以调用removeChild（）

>>> var myp = document.getElementsByTagName('p')[1]
undefined
>>> var removed = document.body.removeChild(myp);
undefined
>>> removed
<p>
>>> removed.firstChild
<em>
>>> var p = document.getElementsByTagName('p')[1]
undefined
>>> p
<p id="closer">
>>> var replaced = document.body.replaceChild(removed,p);
undefined
>>> replaced
<p id="closer">
>>> document.body.innerHTML = '';   //将某个子树中的内容一并抹去的话，最便捷的方式就是将他的innerHTML设置为空字符串。
""
>>> document.body.firstChild
null

function removeAll(n) {              //使用DOM方法就必须对其所有有的子节点进行遍历并逐个删除。
    while (n.firstChild) {
        n.removeChild(n.firstChild);
    }
}
>>> removeAll(document.body);
undefined


@只适用于HTML的DOM对象
// document.images
// document.applets
// document.links
// document.anchors
// document.forms

//document.forms[0]  相当于调用：document.getElementsByTagName('froms')[0];

@document.write()

<p>It is now<script>document.write("<em>"+new Date()+"</em>");</script></p>

//document.writen();功能与document.write()基本相同，只不过该方法会在末尾自动加入换行符“\n”
!!!我们只能在页面被载入时调用document.write()方法，如果我们也试图在页面载入之后调用发该方法，
整个页面的内容都会被替换掉。


@Cokkies、Title、Referrer、Domain
//document.cookie:字符串，存储了用于往返服务器端与客户端之间的cookie信息。
//document.title:用来修改页面在浏览器窗口中所显示的标题的。
//document.referrer中记录的是我们之前所访问过的页面URL。这与浏览器在请求页面是所发送的HTTP头信息
 // 中的Referer值是相同的。
//document.domain:通过它可以对当前所载入页面的域名进行访问。域名只能朝着更非具体化的方向进行。
>>> document.domain
"www.google.com.hk"
>>> document.domain
"www.google.com.hk"
>>> document.domain = "google.com.hk"
"google.com.hk"
>>> document.domain = "www.google.com.hk"
Error: Illegal document.domain value
	

document.domain = "www.google.com.hk"

@事件
>>> var mypara = document.getElementById('closer');
undefined
>>> mypara.addEventListener('click',function(){alert('Boo!'),false});
undefined
>>> mypara.addEventListener('click',console.log,false);   //没效果，FF、Chrome都没，Why？
undefined

//事件传播过程：1.捕捉法：单击首先发生在document上，然后依次传递给body、列表、列表项，最终达到链接。
//2.冒泡法：单击首先发生在链接上，然后逐层向上冒泡，直至document对象。
//addEventListener()第三个参数，决定代码是否采用捕捉法，这个参数设置为false，只是用冒泡法来处理事件。





