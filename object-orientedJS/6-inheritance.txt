第6章 继承
@原型链
//定义三个构造器函数
function Shape(){
    this.name = 'shape';
    this.toString = function() { return this.name; }
}
function TwoDShape(){
    this.name = '2D shape';
}
function Triangle(side,height){
    this.name = 'Triangle';
    this.side = side;
    this.height = height;
    this.getArea = function(){ return this.side * this.height/2;};
}
>>> TwoDShape.prototype = new Shape();
Shape { name="shape", toString=function()}
>>> Triangle.prototype = new TwoDShape();
Shape { name="2D shape", toString=function()}

>>> TwoDShape.prototype.constructor = TwoDShape;  //完成相关的继承关系设定后，对这些对象的constructor属性进行相应的重置。
TwoDShape()
>>> Triangle.prototype.constructor = Triangle;
Triangle(side,height)

>>> var my = new Triangle(5,10);  //新建一个Triangle对象my
undefined
>>> my.getArea();
25
>>> my.toString();   //先遍历my对象中的所有属性，没有toString(),然后再查my._proto_所指的对象，即由new TwoShape（）所创建的实体。TwoDShape实体中任然没有toString（）方法，然后继续检查该实体的_proto_属性，即由new Shape（）所创建的。终于找到了toString（）方法
"Triangle"
>>> my.constructor    //因为之前设置过Triangle.prototype.constructor = Triangle;所以。。
Triangle(side,height)

>>> my instanceof Shape   //用instanceof验证my对象是否是上述三个构造器的实例。
true
>>> my instanceof TwoDShape
true
>>> my instanceof Triangle
true
>>> my instanceof Array
false
//也可以调用这些构造器原型的isPropertypeOf()方法
>>> Shape.prototype.isPrototypeOf(my)
true
>>> TwoDShape.prototype.isPrototypeOf(my)
true
>>> Triangle.prototype.isPrototypeOf(my)
true
>>> Array.prototype.isPrototypeOf(my)
false
>>> String.prototype.isPrototypeOf(my)
false

>>> var td = new TwoDShape();  //用TwoDShape()所创建的对象也可以获得继承自Shape（）的toString（）方法。
undefined
>>> td.constructor
TwoDShape()
>>> td.toString
function()
>>> var s = new Shape()   //用Shape（）创建的对象。
undefined
>>> s.constructor;
Shape()

@将共享属性迁移到原型中
//使用某一个构造器创建对象时，其属性被添加到this中去。这会使某些不能通过实体改变的属性出现一些效率低下的情况。
//所以我们可以选择奖属性添加到所有实体所共享的原型对象中去。
//Shape()和TwoDShape（）

>>> function Shape (){}
undefined
>>> Shape.prototype.name = 'Shape';
"Shape"
>>> Shape.prototype.toString = function(){ return this.name};
function()
>>> function TwoDShape(){}
undefined
>>> TwoDShape.prototype = new Shape();
Shape { name="Shape", toString=function()}
>>> TwoDShape.constructor = TwoDShape;
TwoDShape()
>>> TwoDShape.prototype.name = '2D shape';
"2D shape"

//Triangle的
function Triangle(side,height){
    this.side = side;
    this.height = height;
}
Triangle.prototype = new TwoDShape();
Triangle.prototype.constructor = Triangle;
Triangle.prototype.name = 'Triangle';
Triangle.prototype.getArea = function(){ return this.side*this.height/2;}

>>> var my = new Triangle(5,10);  //效果和前面的一样
undefined
>>> my.getArea();
25
>>> my.toString()
"Triangle"

>>> my.hasOwnProperty('side')   //通过hasOwnProperty()来明确对象自身与其原型链属性的区别。
true
>>> my.hasOwnProperty('name')
false
>>> TwoDShape.prototype.isPrototypeOf(my)   //isPrototype方法和instanceof操作符的工作方式还一样。
true
>>> my instanceof Shape
true

@只继承于原型
//1.不要单独为继承关系创建新对象。
//2.尽量减少运行时方法搜索，例如toString()。

function Shape(){}
//augment prototype
Shape.prototype.name = 'shape';
Shape.prototype.toString = function(){return this.name};

function TwoDShape(){}
TwoDShape.prototype = Shape.prototype;   //look！！！
TwoDShape.prototype.constructor = TwoDShape;
//augment prototype
TwoDShape.prototype.name = '2D shape';

function Triangle(side,height){
    this.side = side;
    this.height = height;
}

//take care of inheritance
Triangle.prototype = TwoDShape.prototype;  //look！！！
Triangle.prototype.constructor = Triangle;
//argument prototype
Triangle.prototype.name = 'Triangle';
Triangle.prototype.getArea = function(){ return this.side * this.height/2;}

>>> var my = new Triangle(5,19);
undefined
>>> my.getArea()
47.5
>>> my.toString()
"Triangle"

//上面的列子查询步骤由三步或四步直接被精简成两步。
//副作用：一单子对象对其原型进行了修改，父对象也会随机被改变，甚至所有的继承关系也是如此。
//比如：
>>> Triangle.prototype.name = 'Triangle';
"Triangle"
>>> var s = new Shape(); 
undefined
>>> s.name
"Triangle"

@临时构造器--new F()
//由上可得如果所有属性都指向了一个相同的对象，父对象就会受到兑现属性的影响。
//这样我们可以创建一个空函数F()，将其原型设置为维基构造器，然后用 new F()来
//创建一些不包含父对象属性的对象，同时又可以从父对象prototype属性中继承一切了。

function Shape(){}
//augment prototype
Shape.prototype.name = 'shape';
Shape.prototype.toString = function(){ return this.name;};

function TwoDShape (){}
//take care of inheritance
var F = function(){};
F.prototype = Shape.prototype;
TwoDShape.prototype = new F();
TwoDShape.prototype.constructor = TwoDShape;
//argument prototype
TwoDShape.prototype.name = '2D shape';

function Triangle(side,height){
    this.side = side;
    this.height = height;
}
//take care of inheritance 
var F = function(){}
F.prototype = TwoDShape.prototype;
Triangle.prototype = new F();
Triangle.prototype.constructor = Triangle;
//augment prototype
Triangle.prototype.name = 'Triangle';
Triangle.prototype.getArea = function(){return this.side*this.height/2;};

//结果测试
>>> var my = new Triangle(5,10);
undefined
>>> my.getArea();
25
>>> my.toString();
"Triangle"
>>> my.__proto__.__proto__.__proto__.constructor
Shape()
>>> var s= new Shape();
undefined
>>> s.name
"shape"

//精良将要共享的属性与方法添加到原型中，然后知围绕原型构建继承关系。


@uber---子对象访问父对象的方式
function Shape(){}
//augment prototype
Shape.prototype.name = 'shape';
Shape.prototype.toString = function() {    //检查对象中是否存在this.constructor.uber属性，如果存在就调用该属性的toString方法。
    var result = [];
    if(this.constructor.uber) {
        result[result.length] = this.constructor.uber.toString();
    }
    result[result.length] = this.name;
    return result.join(',');
};
function TwoDShape(){ }
//take care of inheritance
var F = function(){};
F.prototype = Shape.prototype;
TwoDShape.prototype = new F();
TwoDShape.prototype.constructor = TwoDShape;
TwoDShape.uber = Shape.prototype;
//augment prototype
TwoDShape.prototype.name = '2D shape';

function Triangle(side,height){
    this.side = side;
    this.height = height;
}

//take care of inheritance
var F = function(){};
F.prototype = TwoDShape.prototype;
Triangle.prototype = new F();
Triangle.prototype.constructor = Triangle;
Triangle.uber = TwoDShape.prototype;
//augment prototype
Triangle.prototype.name = 'Triangle';
Triangle.prototype.getArea = function(){ return this.side*this.height/2;}
//上面的程序新增了：
//1.将uber属性设置成了指向其父级原型的引用
//头toString（）方法进行了更新。

>>> var my = new Triangle(5,10);
undefined
>>> my.toString();
"shape,2D shape,Triangle"

@将继承部分封装成函数
//将实现继承关系的代码提炼出来，并迁入一个叫做extend()的可重用函数中：
function extend(Child,Parent) {
    var F = function(){};
    F.prototype = Parent.prototype;
    Child.prototype = new F ();
    Child.prototype.constructor = Child;
    Child.uber = Parent.prototype;
}

//然后通过简单的调用来实现基础：extend(TwoDShape,Shape);
//以及：  extend(Triangle,TwoDShape);
//这也是YUI（Yahoo!User Interface）库在实现继承关系式所采用的的方法。

@属性拷贝   //？？？？

function extend2(Child,Parent) {
    var p = Parent.prototype;
    var c = Child.prototype;
    for (var i in p) {
        c[i] = p[i];
    }
    c.uber = p;
}
var Shape = function () {};
var TwoDShape = function () {};
Shape.prototype.name = 'shape';
Shape.prototype.toString = function() {return this.name;};


>>> extend(TwoDShape,Shape);  //通过extend()方法来实现继承，name属性既不会是TwoDShape()实例的属性，
                             //也不会成为其原型对象的属性,但是子对象依然可以通过继承方式来访问该属性。
undefined
>>> var td = new TwoDShape();
undefined
>>> Shape.prototype.name = 'shape';
"shape"
>>> td.name
"shape"
>>> TwoDShape.prototype.name
"shape"
>>> td.__proto__.name
"shape"
>>> td.hasOwnProperty('name')
false
>>> td.__proto__.hasOwnProperty('name')
false

>>> extend2(TwoDShape,Shape);  //通过extend2()方法来实现，TwoDShape（）的原型中就会拷贝有属于自己的name属性，
                              //同样，其中也会拷贝属于自己的toString方法，但这只是一个函数引用，函数本身并没有被再次创建。
undefined
>>> td.__proto__.hasOwnProperty('name');
true
>>> td.__proto__.hasOwnProperty('toString');
true
>>> td.__proto__.hasOwnProperty === Shape.prototype.toString
true

@小心处理引用拷贝
>>> var A = function(){}, B = function(){};  //创建两个构造器函数
undefined
>>> A.prototype.stuff = [1,2,3];   //在A的原型中添加一些属性
[1, 2, 3]
>>> A.prototype.name = 'a';
"a"
>>> extend2(B,A);    //使用extend2()B的原型继承了A的原型属性
undefined
>>> B.prototype.hasOwnProperty('name')
true
>>> B.prototype.hasOwnProperty('stuff')
true
>>> B.prototype.stuff    //name属于基本类型属性，创建的是一份全新的拷贝，stuff属性是一个数组对象，它所执行的是引用拷贝。
[1, 2, 3]
>>> B.prototype.stuff === A.prototype.stuff
true
>>> B.prototype.name += 'b'   //如果改变B中name拷贝，不会对A产生影响
"ab"
>>> A.prototype.name
"a"
>>> B.prototype.stuff.push(4,5,6);  //如果改变的是B的stuff属性，A就会受到影响了，因为这两个属性引用的是同一个数组。
6
>>> A.prototype.stuff
[1, 2, 3, 4, 5, 6]
>>> B.prototype.stuff = ['a','b','c'];  //如果用另一个对象对B的stuff属性进行完全重写（而不是修改现有属性），则，A的stuff属性会继续引用原有对象，而B的stuff属性则指向了新的对象。
["a", "b", "c"]
>>> A.prototype.stuff
[1, 2, 3, 4, 5, 6]

@对象之间的继承
function extendCopy(p) {
    var c = {};
    for (var i in p) {
        c[i] = p[i];
    }
    c.uber = p;
    return c;
}
var shape = {
    name: 'shape',
    toString: function(){ return this.name;}
}
var twoDee = extendCopy(shape);
twoDee.name = '2D shape';
twoDee.toString = function(){ return this.uber.toString() + ',' + this.name;};

var triangle = extendCopy(twoDee);
triangle.name = 'Triangle';
triangle.getArea = function(){ return this.side*this.height/2;}

>>> triangle.side = 5; triangle.height = 10;triangle.getArea();
25
>>> triangle.toString();
"shape,2D shape,Triangle"

//对于这种方法而言：可能的问题就在于初始化一个新triangle对象的过程过于繁琐。

@深拷贝
//extendCopy()函数所用的创建方式叫做浅拷贝（shallow copy），与之相对的是深拷贝（deep copy）
//由之前谈论可知：当对象类型的属性背靠背是，实际上拷贝的只是该对象在内存中的位置指针。
//这一过程就是所谓浅拷贝，在这种情况下，如果我们修改了拷贝对象，就等同于修改了原对象，深度拷贝可以帮助避免

//定义深度copy
function deepCopy(p,c){
    var c = c || {};
    for (var i in p) {
        if (typeof p[i] === 'object') {
            c[i] = (p[i].constructor === Array)? []:{};
            deepCopy(p[i],c[i]);
        } else {
            c[i] = p [i];
        }
    }
    return c;
}
//创建一个包含数组和子对象属性的对象
var parent = {
    numbers: [1,2,3],
    letters: ['a','b','c'],
    obj: {
        prop:1
    },
    bool:true
};
//测试结果 mydeep 和 myshallow
>>> var mydeep = deepCopy(parent);
undefined
>>> var myshallow = extendCopy(parent);
undefined
>>> mydeep.numbers.push(4,5,6);
6
>>> mydeep.numbers
[1, 2, 3, 4, 5, 6]
>>> parent.numbers
[1, 2, 3]
>>> myshallow.numbers.push(10)
4
>>> myshallow.numbers
[1, 2, 3, 10]
>>> parent.numbers[1,2,3,10]
undefined
>>> mydeep.numbers   //未改变
[1, 2, 3, 4, 5, 6]

@object（）

function object(o) {    //用object()函数来接受父对象，并返回该对象为原型的新对象。
    function F() {}
    F.prototype = o;
    return new F();
}

function object(o) {   //如需要访问buer属性，可以继续object()函数。
    var n;
    function F() {}
    F.prototype = o;
    n = new F();
    n.uber = o;
    return n;
}

var triangle = object(twoDee);
triangle.name = 'Triangle';
triangle.getArea = function(){ return this.side * this.height/2;};
>>> triangle.toString();     //新triangle对象的行为依然不变。
"shape,2D shape,Triangle"

//这种继承方法也成为原型继承

@ 原型继承与属性拷贝的混合应用
//继承：1.使用原型继承的方式克隆现存对象。
// 2. 对其他对象使用属性拷贝的方式。

function objectPlus(o,stuff) {   //接受两个参数，对象o用于继承，另一个对象stuff用于拷贝方法与属性。
    var n;
    function F() {}
    F.prototype = o;
    n = new F();
    n.uber = o;
    
    for(var i in stuff) {
        n[i] = stuff[i];
    }
    return n;
}

var shape = {                            //一个基本对象shape
    name:'shape',
    toString:function() { return this.name;}
};

var twoDee = objectPlus(shape,{      //创建一个继承于shape的2D对象
   name:'2D shape',
   toString:function(){ return this.uber.toString() +','+this.name}
});

var triangle = objectPlus(twoDee,{          //创建一个继承于2D对象的triangle对象，并添加一些额外属性。
    name:'Triangle',
    getArea: function(){return this.side*this.height/2},
    side:0,
    height:0
});

>>> var my = objectPlus(triangle,{side:4,height:4})     //创建一个具体的triangle对象my，并自定义side和height属性。
undefined
>>> my.getArea();
8
>>> my.toString();            //？？？？？WHY??当toString()函数被执行是，Triangle的name属性会被重复两次。
"shape,2D shape,Triangle,Triangle"
>>> var my = objectPlus(triangle,{side:4,height:4,name:'My 4x4'});
undefined
>>> my.toString();
"shape,2D shape,Triangle,My 4x4"

@多重继承




















































