第6章  数组(Arrays)
   数组是一段线性分配的内存，它通过整数去计算机便宜并访问其中的元素。JavaScript没有想这种数组一样的数据结构。反而，JavaScript提供了一种拥有一次额雷数组特性的对象。

@数组字面量(Array Literals)
   一个数组字面量是在一对方括号中保卫另个或多个用逗号分割的值的表达式。

@长度(Length)
   JavaScript数组的length属性时没有上界的，如果用大于或等于当前length的数字作为下表来保存一个元素，那么length将增大来容纳新元素，不会发生数组边界错误。
   length属性的值是这个数组的最大整数属性名加上1，它不一定等于数组里的属性的个数
:

>>> var myArray = [];
undefined
>>> myArray.length
0
>>> myArray[10000]=true;
true
>>> myArray.length;
10001

@删除(Delete)
   delete运算符可以用来从数组中移除元素。但是那样会在数组中遗留一个空洞。因为排在被删除元素之后的元素保留了它们最初的名字(下标)。
   解决的方法是用splice方法，numbers.splice(2,1);第一个参数是数组中的一个序号，第二个参数是要删除的元素个数。

@枚举(Enumeration)
   JavaScript的数组其实就是对象，所以for in 语句可以用来遍历一个数组的所有属性。但for in 无法保证属性的顺序。  对应的for语句避免了这些问题。
var i;
for (i=0;i<myArray.length;i+=1) {
    document.writeln(myArray[i]);
}

@混淆的地方(Confusion)
   JS编程中一个常见的错误是在须使用数组时使用了对象，或者在须使用对象时使用了数组。其实规则很简单：当属性名是连续的整数时，应该使用数组，否则，使用对象。

@方法(Methods)
   通过给Array.prototype扩充一个函数，每个数组都继承了这个方法。
@维度(Dimensions)
   JavaScript的数组通常不会初始化。
   Array.dim = function (dimension,initial) {
    var a = [],i;
    for (i=0;i<dimension;i+=1) {
        a[i] = initial;
    }
    return a;
}

>>> var myArray = Array.dim(10,0);
undefined
>>> myArray
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
   
   JavaScript没有多维数组，但就像大多数类C语言一样，它支持元素为数组的数组。
   JavaScript应该对矩阵提供更好的支持，二维数组
Array.matrix = function (m,n,initial) {
    var a,i,j,mat = [];
    for (i =0;i<m;i+=1) {
        a = [];
        for ( j =0;j<n;j+=1) {
            a[j] = 0;
        }
        mat[i] = a;
    }
    return mat;
}

//构造一个用0填充的4X4矩阵。
var myMatrix = Array.matrix(4,4,0);
document.writeln(myMatrix[3][3]);    //0

//用来构造一个恒等矩阵的方法
Array.identity = function (n) {
    var i,mat=Array.matrix(n,n,0);
    for (i=0;i<n;i+=1) {
        mat[i][i] = 1;
    }
    return mat;
}

myMatrix = Array.identity(4);
document.writeln(myMatrix[3][3]);   //1