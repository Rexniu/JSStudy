函数（Functions）
函数包含一组语句，他们是JavaScript的基础模块单元，用于代码服用、信息隐藏、和组合调用。
@函数对象（Function Objects）
   对象字面量产生的对象连接到Object.prototype，函数对象连接到Function.prototype(该原型对象本身连接到Object.prototype)。
   每个函数对象在创建是也随带一个prototype属性，它的值是一个拥有constructor属性且值即为该函数的对象。

@函数字面量（Function Literal）
   函数字面量包括四个部分：1.保留字function  2.函数名，可以被省略（匿名函数）
3.包围在圆括号中的一组参数   4.包围在花括号中的一组语句，是函数的主体。
   闭包：通过函数字面量创建的函数对象包含一个连接到外部上下文的连接。

@调用(Invocation)
   每个函数接受两个附加的参数：this和arguments。this在面向对象编程中非常重要，它的值取决于调用的模式。JavaScript中一共有四种调用模式：方法调用模式、函数调用模式、构造器调用模式和apply调用模式。

@方法调用模式(The Method Invoctation Pattern)
   当函数被保存为对象的一个属性时，我们称它为一个方法。
   方法可以使用this去访问对象，所以它能从对象中取值或修改该对象。this到对象的绑定发生在调用的时候。

@函数调用模式(The Function Invocation Pattern)
   当一个函数并非一个对象的属性时，那么它被当做一个函数来调用，当函数以此模式调用时，this被绑定到全局对象。这是语言设计上的一个错误。

@构造器调用模式(The Constructor Invocation Pattern)
   
@Apply调用模式(The Apply Invocation Pattern)
   apply方法构建一个参数数组并用其去调用函数。接受两个参数，第一个是将被绑定给this的值，第二个就是一个参数数组。

@参数（Arguments）
   当函数被调用时，会得到一个“免费”奉送的参数，那就是arguments数组。
   arguments拥有一个length属性，但缺少所有的数组方法。

@返回（Return）
   return语句可用来是函数提前返回。当return被执行是，函数立即返回而不再执行余下的语句。一个函数总会返回一个值，如果没有指定返回值，则返回undefined。

@异常(Exceptions)
   throw语句中断函数的执行。
   一个try语句只会有一个将捕获所有异常的catch代码块。

@给类型增加方法(Arguments Types)
   JavaScript允许给语言的基本类型增加方法。
   可以通过给Function.prororype增加方法来时的发i放法对所有的函数可用。

@递归
   递归函数会直接或间接的调用自身的一种函数。
   汉诺塔：
var hanoi = function (disc,src,aux,dst) {
    if(disc > 0) {
        hanoi(disc -1,src,dst,aux);
        document.writeln('Move disc'+disc+' from'+src+' to '+dst);
        hanoi(disc-1,aux,src,dst);
    }
 }
hanoi(3,'Src','Aux','Dst');
Move disc1fromSrctoDst Move disc2fromSrctoAux Move disc1fromDsttoAux Move disc3fromSrctoDst Move disc1fromAuxtoSrc Move disc2fromAuxtoDst Move disc1fromSrctoDst 

@作用域（Scope）
   大多数使用C语言语法的语言都有块级作用域。
   JavaScript确实有函数作用域，那意味着定义在函数中的参数和变量在函数外部是不可见的。而且在一个函数中的任何位置定义的变量在函数中的任何地方都可见。

@闭包(Closure)
   作用域的好处是内部函数可以访问定义他们的外部函数的参数和变量（除了this和arguments）。
//创建一个名为quo的构造函数
//构造出带有get_status私有属性的一个对象。
var quo = function (status) {
    return {
        get_status:function() {
            return status;
        }
    };
}
//构造一个quo实例
var myQuo = quo('amazed');
document.writeln(myQuo.get_status);
（结果： function () { return status; }  WHY???）
   当我们调用quo时，他返回包含get_status方法的一个新对象。该对象的一个引用保存在myQuo中。即使quo已经返回了，但get_status方法仍然享有访问quo对象的status属性的特权。get_status方法并不是反问该参数的一个拷贝；它访问的是该参数本身，这是可能的因为该函数可以访问它被创建是所处的上下文环境，这被称为闭包。

@回调（Callbacks）
   比如：
request = prepare_the_request();
response = send_request_synchronously(request);
display(response);
这种方式的问题在于网络上的同步请求见识导致哭对端进入假死状态。
   更好的方式：发起异步请求
request = prepare_the_request();
send_request_asynchronously(request,function (response){
    display(reponse);
});
传递了一个函数作为参数给send_request_asynchronously函数，他讲在收到响应时被调用。

@模块（Module）
   我们可以使用函数和闭包来构造模块，模块是一个提供接口却隐藏状态与实现的函数或对象。我们几乎可以完全摒弃全局变量的使用。
   模块模式的一般形式是：一个定义了私有变量和函数的函数；利用闭包创建可以访问私有变量核函数的特权函数；最后返回这个特权函数，或者把他们保存到一个可访问道德地方。

@级联（Cascade）
   对一些没有返回值的方法，如果我们让这些方法返回this而不是undefined，就可以启用级联。
   在一个级联中，我们可以在单独一条的语句中一次调用同一个对象的很多方法。

@套用（Curry）
   套用允许我们将函数与传递给他的参数相结合去产生出一个新的函数。

@记忆(Memoization)
   函数可以用对象去记住先前操作的结果，从而能避免无谓的运算。这种优化被称为记忆。
   计算Fibonacci数列：
var fibonacci = function(n) {
    return n<2 ? n:fibonacci(n-1) + fibonacci(n-2);
};
for (var i = 0;i<=10;i+=1) {
    document.writeln('//' + i+':'+fibonacci(i));
}

//fibonacci函数被调用了453次，我们调用了11次，而它自身调用了442次去计算可能已被刚计算过的值。
//我们在一个名为memo的数组里保存我们的存储结果，存储结果可以隐藏在闭包中。
var fibonacci = function () {
    var memo = [0,1];
    var fib = function(n) {
        var result = memo[n];
        if (typeof result !== 'number') {
            result = fib(n-1)+fib(n-1);
            memo[n] = result;
        }
        return result;
    };
    return fib;
}();
//只被调用了29次，我们调用了11次，自身调用了18次。
   把这种形式一般化。编写一个函数来帮助构造带记忆功能的函数。
var memoizer = function (memo,fundamental) {
    var shell = function (n) {
        var result = memo[n];
        if (typeof result !== 'number') {
            result = fundamental(shell,n);
            memo[n] = result;
        }
        return result;
    };
    return shell;
};
    使用memoizer来定义fibonacci函数，提供其初始的memo函数和fundametal函数。
var fibonacci = memoizer([0,1],function(shell,n) {
    return shell (n-1) + shell(n-2);
});

   产生一个可记忆的阶乘函数
var factorial = memoizer([1,1],function(shell,n) {
    return n*shell(n-1);
});
