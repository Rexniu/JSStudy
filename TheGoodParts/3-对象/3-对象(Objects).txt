JavaScript的简单类型包括数字、字符串、布尔值、null值和undefined值。

@对象字面量（Object Literals）
   一个对象字面量就是包围在一对或括号中的零后哦多个“名/对”对。
   属性的值可以从包括另一个对象字面量在内的任意表达式中获得，对象是可嵌套的。

@检索（Retrieval）
   两种方式：1.在[]后缀中括住一个字符串表达式的方式。2.用.表示法代替。
   优先考虑.表示法，因为他更紧凑且可读性更好。
   ||运算符可以用来填充默认值。比如：
var middle = stooge['middle-name'] || "(none)";
var status = flight.status || "unknown";
   尝试检索一个udefined值将会导致TypeError异常，这可以通过&&运算符来避免错误。
flight.equipment                           //undefined
flight.equipment.model                     //throw "TypeError"
flight.equipment.model  && flight.equipment.model  //undefined

@更新(Update)
   对象中的值可以通过赋值语句来更新。

@引用(Reference)
   对象通过引用来传递，它们永远不会被拷贝。

@原型(Prototype)
   每个对象都链接到一个原型对象，并且它可以从中继承属性，所有通过对象字面量创建的对象都链接到Object.prototype这个JavaScript中标准的对象。
   原型连接只有在检索值得时候才会被调用，如果我们尝试去获取对象的某个属性值，且该对象没有此属性名，那么JavaScript会试着从原型对象中获取属性值，如果那个原型对象也没有该属性，那么再从它的原型中寻找，知道该过程最后到达终点Object.prototype.否则返回undefined。这个过程称为“委托”。

@反射（Reflection）
   检查对象并确定对象有什么属性：1.typeof操作符，如果返回undefined，证明没改属性。
2.使用hasOwnProperty方法，如果该对象拥有独有的属性，它将返回true。hasOwnProperty方法不会检查原型链。   flight.hasOwnProperty('number');   //true
           flight.hasOwnProperty('constructor');    //false

@枚举(Enumeration)
   for in 语句可用来遍历一个对象中的所有属性名。该枚举过程将会列出所有的属性，包括函数和你可能不关心的原型中的属性。
   最常用的过滤器是hasOwnProperty方法，以及使用typeof来排除函数。

@删除(delete)
   可以用来删除对象的属性。它将会移除对象中确定包含的属性，他不会触及原型链中的任何对象。

@减少全局变量污染(Global Abatement)
   最小化使用全局变量的一个方法是在你的应用中只创建唯一一个全局变量：var MYAPP = {}；
将该变量编程应用的容器。把多个全局变量都整理在一个名称空间下，将显著降低与其他应用程序、组件或类库之间产生糟糕的相互影响的可能性。

   