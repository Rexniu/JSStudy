第7章 正则表达式(Regular Expressions)
   JavaScript的许多特性都借鉴自其它语言。语法借鉴自Java，函数借鉴自Scheme，原型借鉴自Self，而JavaScript的正则表达式则借鉴自Perl。
   JavaScript中，正则表达式必须写在一行中，正则表达式中的空白是至关重要的。

var parse_url = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/;

   ^ 表示这个字符串的开始，它是一个标记，用来防止exec跳过不像URL(non-URL-like)的前缀：

   (?:([A-Za-z]+):)?
这个因子匹配一个协议名，但仅当他之后跟随一个:的时候才匹配。(?:...)表示一个非捕获型分组。后缀?表示这个分组是可选的。（...）表示一个捕获型分组，一个捕获型分组都将被指定一个编号。第一个捕获型分组的编号是1，所以改风阻所匹配的文本拷贝将出现在result[2]中。   [...]表示一个字符类，这个字符类A-Za-a包含26个大写字母和26个小写字母。连字符(-)表示范围从A到Z。后缀+表示这个字符类将被匹配1次或多次。这个组后面跟着字符：，它将按字面进行匹配:
   (\/{0,3})
下一个因子是捕获型分组2，\/表示一个应该被匹配的/（斜杠）。它用\（反斜杠）来进行转义，这样它就不会被错误的解释为这个正则表达式的结束符。后缀{0,3}表示/将被匹配0次，或者1到3次之间：
   ([0-9.\-A-Za-z]+)
下一个因子是捕获型分组3，它将匹配一个主机名，有1个或多个数字而组成的序列。\d表示一个数字字符。1个或多个数字组成的数字串将被捕获型分组4捕获：
   (?::(\d+))?
下一个可选的因子将匹配端口号，它是由一个前置：加上1个或多个数字而组成的序列。\d表示一个数字字符。1个或多个数字组成的数字串将被捕获型分组4捕获：
   (?:\/([^?#]*))?
我们有另一个可选的分组，该分组以一个/开始。之后的字符类{^?#}以一个^开始，它表示这个类包含除？和#之外的所有字符。*表示这个字符类将被匹配0次或多次。
   (?:\?([^?#]*))?
一个以一个?开始的可选分组，它包含捕获型分组6，这个分组包含0个或多个非#字符：
   (?:#(.*))?
最后一个可选分组也是以#开始的，.将匹配除行结束符以外的所有字符：
   $
$表示这个字符串的结束，它让我们确信这个URL的尾部没有其他更多的内容。


