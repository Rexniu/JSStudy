第5章 继承(Inheritance)


在那些基于类的语言（比Java）中，继承（inheritance或extends）提供了两个有用的服务。首先，它是代码重用的一种形式。另一个好处是它包括了一套类型系统的规范。

基于类的语言中，对象时类的实例，并且类可以从另一个类继承，JavaScript是一门基于原型的语言，这意味着对象直接从其他对象继承。

@伪类  ？？？？
当一个函数队形被创建时，Function构造器产生的函数对象会运行类似这样的一些代码：
    	this.prototype = { constructor:this};
新函数对象被赋予一个prototype属性，其值是包含一个constructor属性值为该新函数对象。该prototype对象时存放继承特征的地方。

当采用构造器调用模式，即使用new前缀去调用一个函数时，这将修改函数执行的方式。
 如果new运算符是一个方法而不是一个运算符，它可能会向这样执行：

Function.method('new',function() {
    //创建一个新对象，它继承自构造器函数的原型对象。
    var that = Object.beget(this.prototype);
    //调用构造器函数，绑定 -this- 到新对象。
    var other = this.apply(that,arguments);
    //如果它的返回不是一个对象，就返回该新对象。
    return (typeof other === 'object' && other) || that;
});

@对象说明符(Object Specifiers)
var myObject = maker(f,l,m,c,s); 这样写不如这样：
var myObject = maker ({
    first:f,
    latst:l,
    state:s,
    city:c
});

@原型 Prototypal
基于原型的继承相比基于累的继承在概念上更为简单：一个新对象可以继承一个就对象的属性。通过构造一个有用的对象开始，接着可以构造跟多和那个对象类似的对象。可以完全避免把一个应用拆解成一系列潜逃抽象类的分类过程。


@函数化（Functional）
构造一个将产生对象的函数：
1.它创建一个新对象。
2.它选择性地定义私有实例变量和方法。这些就是函数中通过var语句定义的普通变量。
3.它给这个新对象扩充方法，哪些方法将拥有特权去访问参数，以及在第二步中通过var语句定义的变量。
4.它返回那个新对象。
一个函数化构造器的伪代码模板：
var constructor = function (spec,my) {
    var that,其他的私有实例变量；
    my = my || {};
    把共享的变量和函数添加到my中
    that = 一个新对象
    添加给that的特权方法。
    return that;
}
spec对象包含构造器须要构造一个新实例的所有信息。spec的内容可能会被复制到私有变量中，或者被其他函数改变。或者方法可以在需要的时候访问spec的信息。
my对象时一个为继承链中的构造器提供mii共享的容器。my对象可以选择性的使用。如果没有传入一个my对象，那么会创建一个my对象。
接下来，声明该对象私有的实例变量和方法。通过简单的声明变量就可以做到。构造器的变量和内部函数比昂成了该实例的私有成员。内部函数可以访问spec、my、that，以及其他私有变量。


@部件(Parts)  ？？？
我们可以从一套部件中组合处对象来，例如，我们可以构造一个能添加简单事件处理特性到任何对象上的函数。它会给对象添加一个on方法、一个fire方法和一个私有的事件注册表对象。



