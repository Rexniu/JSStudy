B-鸡肋(Bad Parts)

B.1  ==
始终使用=== 和 ！===，不要使用== 和 ！==。
“==”“！==”只有在两个运算数类型一致时才会做出正确地判断，但如果两个运算数是不同的类型是，它们试图去前置转换其值的类型。
>>> ' ' == '0'
false
>>> 0 == ' '
true
>>> 0 == '0'
true
>>> false == 'false'
false
>>> false == '0'
true
>>> false == undefined
false
>>> false == null
false
>>> null == undefined
true
>>> '\t\r\n' == 0
true

B.2 with语句
JavaScript提供了一个with语句，本意是想用来快捷地访问对象的属性。不幸的是，它的结果可能有事是不可预料的，所以应该避免使用它。

B.3 eval
eval函数传递一个字符串给JavaScript编译器，并且执行其结果。使用eval形式的代码会更加难以阅读。会使性能显著降低，还键入了应用的安全性。

B.4 continue语句
continue语句跳刀循环的顶部。（作者）发现一段代码通过移除continue语句后，性能都会得到改善。

B.5  switch贯穿
除非明确的中断流程，否则每次条件判断后多贯穿到下一个case条件。

B.6 缺少块的语句
If、while、do或for语句可以接受一个括在花括号中的代码块，也可以接受单行语句。单行语句的形式是另一种带刺的玫瑰。它带来的好处是可以节约两个字节，但这是不是个好处值得商榷。它模糊了程序的结构，使得在随后的操作代码种可能很容易插入错误。

B.7 ++--
递增和递减运算符使得程序员可以用非常简洁的风格去编码。大多数的缓冲区溢出错误所造成的安全漏洞，都是由于像这样编码而导致的。

B.8 位运算符
JavaScript有着与Java相同的一套位运算符。但JavaScript没有整数类型，它只有双精度的浮点数，因此，位操作将它们的数字运算数先转化成整数，接着执行运算，然后再转化回去。
